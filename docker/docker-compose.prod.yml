# Production Docker Compose for Sup Application
version: '3.8'

services:
  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - sup-network

  # Backend services
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/backend.Dockerfile
      target: runtime
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/sup_prod
      REDIS_URL: redis://redis:6379
      SCYLLA_NODES: scylladb:9042
      SCYLLA_KEYSPACE: sup
      GUARDIAN_SECRET_KEY: ${GUARDIAN_SECRET_KEY}
      MIX_ENV: prod
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      scylladb:
        condition: service_started
    restart: unless-stopped
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    networks:
      - sup-network
    healthcheck:
      test: ["CMD", "/app/bin/sup", "eval", "Sup.HealthCheck.check()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/frontend.Dockerfile
      target: production
    environment:
      REACT_APP_API_URL: ${API_URL:-http://localhost}
      REACT_APP_WS_URL: ${WS_URL:-ws://localhost}
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    networks:
      - sup-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Autocomplete microservice
  autocomplete:
    build:
      context: ./autocomplete
      dockerfile: Dockerfile
      target: production
    environment:
      HOST: 0.0.0.0
      PORT: 8000
      WORKERS: 2
    volumes:
      - ./autocomplete/data:/app/data:ro
      - ./autocomplete/models:/app/models:ro
      - autocomplete_logs:/app/logs
    restart: unless-stopped
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    networks:
      - sup-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Database services
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: sup_prod
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - sup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sup_prod"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - sup-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  scylladb:
    image: scylladb/scylla:5.2
    command: --smp 2 --memory 2G --overprovisioned 1 --api-address 0.0.0.0
    volumes:
      - scylla_data:/var/lib/scylla
    restart: unless-stopped
    networks:
      - sup-network
    healthcheck:
      test: ["CMD-SHELL", "nodetool status | grep UN"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sup-network

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    networks:
      - sup-network

volumes:
  postgres_data:
  redis_data:
  scylla_data:
  autocomplete_logs:
  prometheus_data:
  grafana_data:

networks:
  sup-network:
    driver: bridge
